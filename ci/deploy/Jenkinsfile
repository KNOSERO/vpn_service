pipeline {
    agent {
        label 'home'
    }
    options {
        skipDefaultCheckout();
        timestamps();
        ansiColor('xterm')
    }
    environment {
        CREDITS_ID = 'github-token'
    }

    stages {
        stage('Init ENV') {
            steps {
                script {
                    def repoUrl = scm.getUserRemoteConfigs()[0].getUrl()
                    repoUrl = repoUrl.replaceAll(/\.git$/, "")

                    def parts = repoUrl.tokenize('/')
                    env.ACCOUNT = parts[-2]
                    env.REPO    = parts[-1]
                    env.REPO_URL = repoUrl + ".git"

                    echo "ACCOUNT=${env.ACCOUNT}"
                    echo "REPO=${env.REPO}"
                    echo "REPO_URL=${env.REPO_URL}"
                }
            }
        }

        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    userRemoteConfigs: [[
                        name: 'origin',
                        url: env.REPO_URL,
                        credentialsId: env.CREDITS_ID,
                        refspec: '+refs/heads/*:refs/remotes/origin/*'
                    ]],
                    branches: [[ name: "${env.BRANCH}" ]],
                    extensions: [
                        [$class: 'CloneOption', shallow: true, depth: 25, noTags: true, timeout: 240],
                        [$class: 'PruneStaleBranch'],
                        [$class: 'CleanBeforeCheckout']
                    ]
                ])
            }
        }

        stage('Init') {
            parallel {
                stage('SSH key configuration') {
                    steps {
                        withCredentials([sshUserPrivateKey(credentialsId: 'id_home_lab', keyFileVariable: 'SSH_KEY')]) {
                            sh '''
                                mkdir -p /root/.ssh
                                cp "$SSH_KEY" /root/.ssh/id_home_lab
                                chmod 600 /root/.ssh/id_home_lab
                               '''
                        }
                    }
                }

                stage('Init Submodules') {
                    steps {
                        script {
                            sh '''
                                git config --global url."https://github.com/".insteadOf "git@github.com:"
                                git submodule sync --recursive
                                git submodule update --init --recursive --remote
                            '''
                        }
                    }
                }
            }
        }

        stage('Prepare Config') {
            steps {
                script {
                    writeFile file: 'inventory.ini', text: params.CONFIG
                }
            }
        }

        stage('Run playbook Ansible') {
            environment {
                ANSIBLE_HOST_KEY_CHECKING = 'False'
            }
            steps {
                script {
                    def playbookPath = "playbook.yml"
                    sh "ansible-playbook -i inventory.ini ${playbookPath}"
                }
            }
        }
    }
}